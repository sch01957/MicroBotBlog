"""
Django settings for projectBlog project.

Generated by 'django-admin startproject' using Django 4.1.dev20211105111118.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

DOMAIN = os.getenv('DOMAIN', 'http://127.0.0.1:8000')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-kpp%ga$)gsiu^(kyx_4f!e@i7t=$8megi#p^0+*90*_x+ihthf')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG_MODE', 'True') == 'True'

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'microblog.apps.MicroblogConfig',
    'markdownify.apps.MarkdownifyConfig',
    'telegramBot.apps.TelegrambotConfig',
    'django_cleanup.apps.CleanupConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'projectBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'projectBlog.wsgi.application'

CSRF_TRUSTED_ORIGINS = [DOMAIN]

# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mydb',
        'USER': 'andreas',
        'PASSWORD': 'mypw',
        'HOST': 'localhost',
        'PORT': '3306',
    }
}
e = os.getenv('DB_USER')
if e:
    DATABASES['default']['USER'] = e
e = os.getenv('DB_PASSWORD')
if e:
    DATABASES['default']['PASSWORD'] = e
e = os.getenv('DB_HOST')
if e:
    DATABASES['default']['HOST'] = e
e = os.getenv('DB_PORT')
if e:
    DATABASES['default']['PORT'] = e


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = os.getenv('DJANGO_LANGUAGE_CODE', 'de-de')

TIME_ZONE = os.getenv('DJANGO_TIME_ZONE', 'Europe/Berlin')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = 'static/'
e = os.getenv('DJANGO_STATIC_ROOT')
if e:
    STATIC_ROOT = e

MEDIA_URL = '/media/'
MEDIA_ROOT = os.getenv('DJANGO_STATIC_MEDIA', BASE_DIR.joinpath('media'))

# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Markdownify settings

MARKDOWNIFY = {
    "default": {
        "MARKDOWN_EXTENSIONS": [
            'markdown.extensions.fenced_code',
            'markdown.extensions.extra',
        ],
        "WHITELIST_TAGS": [
            'a',
            'abbr',
            'acronym',
            'b',
            'blockquote',
            'em',
            'i',
            'li',
            'ol',
            'p',
            'strong',
            'ul',
            'h1',
            'h2',
            'h3',
            'h4',
            'h5',
            'pre',
            'code',
            'br',
            'img',
        ],
        "WHITELIST_ATTRS": [
            'href',
            'src',
            'alt',
        ],
        "WHITELIST_STYLES": [
            'color',
            'font-weight',
        ],
        "STRIP": False
    }
}

# Telegram Bot

TELEGRAM_BOT = {
    "name": os.getenv('TELEGRAMBOT_NAME', 'ChangeToYourBotName'),
    "username": os.getenv('TELEGRAMBOT_USERNAME', 'usernameEndingWithBot'),
    "token": os.getenv('TELEGRAMBOT_TOKEN', '1234567890:ABCDEFfakeToken123456789GHIJKLMNOPQ'),
    "register_webhook": os.getenv('TELEGRAMBOT_REGISTERWEBHOOK', False),
}
